// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  login    String  @unique
  name     String  @unique
  hashedRT String?
  code2FA  String? @unique

  online Boolean    @default(false)
  status UserStatus @default(OFFLINE)

  level  Float     @default(1)
  avatar String?
  s2fa   Status2fa @default(NOTSET)

  blockedUsers  BlockedUser[] @relation(name: "blocker")
  blockedByUser BlockedUser[] @relation(name: "blocked")

  sentRequests     FriendRequest[] @relation("sender")
  receivedRequests FriendRequest[] @relation("receiver")

  ownedChannels  Channel[]           @relation("channelOwner")
  adminChannels  AdminsOnChannels[]
  memberChannels MembersOnChannels[]
  bannedChannels BannedOnChannels[]

  sentMessages Message[] @relation("sender")

  initGames    Game[] @relation("player1")
  invitedGames Game[] @relation("player2")
  wonGames     Game[] @relation("winner")
  // mutedOnChannel    MutedByUserOnChannel[] @relation("mutedUser")
  // hasMutedOnChannel MutedByUserOnChannel[] @relation("mutedByUser")

  achievement Achievements[] @relation("user")

  @@map("users")
}

enum UserStatus {
  ONLINE
  OFFLINE
  PLAYING
}

enum Status2fa {
  SET
  NOTSET
}

model FriendRequest {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  from   User @relation(name: "sender", fields: [fromId], references: [id], onDelete: Cascade)
  fromId Int  @map("from_user_id")
  to     User @relation(name: "receiver", fields: [toId], references: [id], onDelete: Cascade)
  toId   Int  @map("to_user_id")

  status FRStatus @default(PENDING)

  @@unique([fromId, toId])
  @@map("friend_requests")
}

enum FRStatus {
  PENDING
  REFUSED
  ACCEPTED
}

model BlockedUser {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  blocked     User @relation(name: "blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId   Int  @map("blocked_user_id")
  blockedBy   User @relation(name: "blocker", fields: [blockedById], references: [id], onDelete: Cascade)
  blockedById Int  @map("blocker_user_id")

  @@unique([blockedId, blockedById])
  @@map("blocked_users")
}

model Channel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner   User    @relation(name: "channelOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int     @map("owner_id")
  name    String
  avatar  String?

  admins  AdminsOnChannels[]
  members MembersOnChannels[]
  banned  BannedOnChannels[]
  // muted   MutedByUserOnChannel[] @relation("mutedOnChannel")

  messages Message[] @relation("channel")

  passwordHash String?
  visibility   VisType @default(PUBLIC)

  @@map("channels")
}

enum VisType {
  PUBLIC
  PRIVATE
  PROTECTED
}

model MembersOnChannels {
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([channelId, userId])
}

model AdminsOnChannels {
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([channelId, userId])
}

model BannedOnChannels {
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([channelId, userId])
}

// model MutedByUserOnChannel {
//   channel   Channel @relation(name: "mutedOnChannel", fields: [channelId], references: [id])
//   channelId Int     @map("channel_id")

//   mutedUser     User @relation(name: "mutedUser", fields: [mutedUserId], references: [id])
//   mutedUserId   Int  @map("muted_user_id")
//   mutedByUser   User @relation(name: "mutedByUser", fields: [mutedByUserId], references: [id])
//   mutedByUserId Int  @map("muted_by_user_id")

//   @@id([channelId, mutedUserId, mutedByUserId])
// }

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sender   User @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId Int  @map("sender_id")

  channel   Channel @relation(name: "channel", fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int     @map("channel_id")

  body String

  @@map("messages")
}

model Game {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  uuid    String  @unique
  private Boolean @default(false)

  player1     User    @relation(name: "player1", fields: [player1Id], references: [id], onDelete: Cascade)
  player1Id   Int     @map("player1_id")
  player1Name String?

  player2     User?   @relation(name: "player2", fields: [player2Id], references: [id], onDelete: Cascade)
  player2Id   Int?    @map("player2_id")
  player2Name String?

  winner   User? @relation(name: "winner", fields: [winnerId], references: [id], onDelete: Cascade)
  winnerId Int?  @map("winner_id")

  score1 Int?
  score2 Int?

  @@map("games")
}

enum Achievement_type {
  TENVICTORIES 
  FIRSTVICTORY
  LEVEL10
  LOOSER
}

model Achievements {
  achievementName Achievement_type  @map("achievment_name")

  user User @relation(name: "user", fields: [userId], references: [id])
  userId Int  @map("user_id")

  @@map("achievements")

  @@unique([userId,achievementName])
}