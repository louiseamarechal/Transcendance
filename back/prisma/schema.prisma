// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  login    String  @unique
  name     String  @unique
  hashedRT String?

  level         Float     @default(1)
  avatar        String?
  s2fa          Status2fa @default(NOTSET)
  statTotalGame Int       @default(0)
  statTotalWin  Int       @default(0)

  friends  User[] @relation(name: "friends")
  friendOf User[] @relation(name: "friends")

  sentRequests     FriendRequest[] @relation("sender")
  receivedRequests FriendRequest[] @relation("receiver")

  ownedChannels   Channel[]           @relation("channelOwner")
  adminChannels   AdminsOnChannels[]
  memberChannels  MembersOnChannels[]
  blockedChannels BlockedOnChannels[]

  sentMessages Message[] @relation("sender")

  initGames         Game[]                 @relation("player1")
  invitedGames      Game[]                 @relation("player2")
  wonGames          Game[]                 @relation("winner")
  mutedOnChannel    MutedByUserOnChannel[] @relation("mutedUser")
  hasMutedOnChannel MutedByUserOnChannel[] @relation("mutedByUser")

  @@map("users")
}

enum Status2fa {
  SET
  NOTSET
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  from   User @relation(name: "sender", fields: [fromId], references: [id], onDelete: Cascade)
  fromId Int  @map("from_user_id")
  to     User @relation(name: "receiver", fields: [toId], references: [id], onDelete: Cascade)
  toId   Int  @map("to_user_id")

  status FRStatus @default(PENDING)

  @@unique([fromId, toId])
  @@map("friend_requests")
}

enum FRStatus {
  PENDING
  REFUSED
  ACCEPTED
}

model Channel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner   User    @relation(name: "channelOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int     @map("owner_id")
  name    String
  avatar  String?

  admins  AdminsOnChannels[]
  members MembersOnChannels[]
  blocked BlockedOnChannels[]
  muted   MutedByUserOnChannel[] @relation("mutedOnChannel")

  messages Message[] @relation("channel")

  passwordHash String?
  visibility   VisType @default(PUBLIC)

  @@map("channels")
}

enum VisType {
  PUBLIC
  PRIVATE
  PROTECTED
}

model AdminsOnChannels {
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([channelId, userId])
}

model MembersOnChannels {
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([channelId, userId])
}

model BlockedOnChannels {
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@id([channelId, userId])
}

model MutedByUserOnChannel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  channel   Channel @relation(name: "mutedOnChannel", fields: [channelId], references: [id])
  channelId Int     @map("channel_id")

  mutedUser     User @relation(name: "mutedUser", fields: [mutedUserId], references: [id])
  mutedUserId   Int  @map("muted_user_id")
  mutedByUser   User @relation(name: "mutedByUser", fields: [mutedByUserId], references: [id])
  mutedByUserId Int  @map("muted_by_user_id")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sender   User @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId Int  @map("sender_id")

  channel   Channel @relation(name: "channel", fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int     @map("channel_id")

  body String

  @@map("messages")
}

model Game {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  player1   User @relation(name: "player1", fields: [player1Id], references: [id], onDelete: Cascade)
  player1Id Int  @map("payer1_id")

  player2   User @relation(name: "player2", fields: [player2Id], references: [id], onDelete: Cascade)
  player2Id Int  @map("player2_id")

  winner   User? @relation(name: "winner", fields: [winnerId], references: [id], onDelete: Cascade)
  winnerId Int?  @map("winner_id")

  score String?

  @@map("games")
}
